I have used some new libraries for this assignment in additional to the given ones and I have included them in my requirements.txt
Database Setup: This application uses MySQL for storing data. You need to set up a MySQL database and provide the connection details in the code. Make sure to create a database named file_storage_db.
Environment Variables: If you have any environment variables to set, you can create a .env file in the project directory and define them there.
Run the Application: To start the FastAPI service, run the following command in your terminal:
uvicorn main:app --reload
This will start the service on http://127.0.0.1:8000 by default.
API Endpoints:
POST /predict: This endpoint accepts file uploads along with a question. It processes the uploaded file and answers the question based on its content.
Endpoint Details
POST /predict
Request Parameters:
question: The user's question.
file: The file to be uploaded (supports TXT, PDF, DOCX, and CSV formats).
Response:
Returns a JSON response with the answer to the user's question (result).
Uploading a File: You start by visiting the web interface provided by the FastAPI application. You are presented with an interface where you can upload files. You have the option to upload plain text files (*.txt), PDF files (*.pdf), or CSV files (*.csv).
Asking a Question: After selecting a file to upload, you can enter a question related to the content of the file. This question could be anything you want to know about the content of the file you are uploading.
Submitting the Request: Once you have selected the file and entered your question, you submit the request. This sends the file and your question to the FastAPI service for processing.
Processing the Request: The FastAPI service receives your request and starts processing it. If the uploaded file is a plain text file, PDF file, or CSV file, the service extracts the text content from the file. If you asked to summarize the text, it summarizes the content using Latent Semantic Analysis (LSA) to generate a concise answer to your question.
Generating the Response: After processing the file and your question, the FastAPI service generates a response. If the service was able to summarize the text and find an answer to your question, it returns the answer in the response. If not, it utilizes a generative AI chatbot to generate a response based on your question.
Viewing the Response: Finally, you receive the response from the FastAPI service. If the service was able to find an answer to your question, you see the answer displayed on the web interface. If not, you see a response generated by the chatbot.
I have also made changes in the frontend such that a pop up message appears after the successful submission of the file.
